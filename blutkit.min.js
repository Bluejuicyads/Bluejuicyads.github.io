/*
 * BlueKit - High-Quality GUI Framework for J's
 * Version: 1.0.0
 * Author: ghgltggamer
 * License: MIT
 * 
 * Description:
 * BlueKit is a GUI framework designed to simplify the development of high-quality graphical user interfaces for J's.
 * It provides a set of tools and components that enable developers to create visually appealing and responsive applications
 * with ease. The framework focuses on performance, ease of use, and customization to meet the needs of modern applications.
 * 
 * Features:
 * - Customizable UI components
 * - Responsive layout system
 * - Theme support
 * - Advanced event handling
 * - Animation and transition effects
 * - Extensible architecture
 * 
 * License:
 * MIT License
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 // Cache will contain all the data of Application
var BlueKit_AppCache = '';

// BlueKit MACROS
const BlueKit_Cache_Data = 1290932810089173;
const BlueKit_Main_App_Data=2877836827364912;

// AppData for External edit
var BlueKit_App_Data='';
 
// This class will creata a new Console Application
class BlueKit_Console_Application{
  ConsoleLogs='';
  CreateApp(){
    document.body.innerHTML='BlueKit Console Application<br><br>';
    document.body.style.background='#1C1C1C';
    document.body.style.color='silver';
    document.body.style.fontFamily='Arial';
  }
  
  AddLogs(log){
    document.body.innerHTML += 'bluekit@host >>>'+log+'<br>';
  }
};

// Imported from Operating Syste's Js Framework
const Mouse = {
  getPos(event) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
};


// This class will create a new Android App 
class BlueKit_Android_Application{
  AppName='BlueKit New Android Application'
  AppIcon='img/bluekit.jpg'
  AppDescription='This is a BlueKit based android application'
  AppSearchable='Yes'
  AppVisitingTime='1'
  AppVersion='1.0'
  AppAuthor='Unknown'
  AppConfiguration=''
  AppStatus=0
  AppRoot='No BlueKit App was created so there is no App Root access'
  AppData=``
  CreateApp(warning=1){
    var status=this.AppStatus;
    if (warning){
      var getStatus = confirm('This action will erase all the content of the WebPage and create a BlueKit application from scratch! \n\n Do you still want to continue?');
      if (getStatus){
        status=1;
      }
      else {
        status=0;
      }
    }
    else{
      if (status===1){
        document.body.innerHTML='';
        console.log("BlueKit Application was created");
        this.AppRoot = crypto.randomUUID();
        document.body.innerHTML=`
        <bluekit>
          <application>
            <platform type="BlueKit::Android_Application" id="${this.AppRoot}">
              ${BlueKit_App_Data}
            </platform>
          </application>
        <bluekit>
        `;
      }
      else if(status===0){
        // don't do anything
        console.log("No BlueKit Application was created")
      }
      else{
        console.error("Invalid status from BlutKit_Android_Application.CreateApp");
        BlueKit_Console_Application.ConsoleLogs='(x) BlueKit ERROR Check your browser console for problem';
        BlueKit_Console_Application.CreateApp();
      }
    }
  }
  // AppJs will give all the JavaScript controlls of the application
  AppJs=document.getElementById(this.AppRoot);
  // Reset the Application
  ResetApp(){
    // this.AppJs.innerHTML='';
    document.getElementById(this.AppRoot).innerHTML = '';
  }
  // Add blank line to the app
  AddLine(line='<br>'){
    // this.AppJs.innerHTML+=line;
    // this.AppCache+=line;
    var build_root = crypto.randomUUID();
    BlueKit_AppCache+=line;
    return {
      LoadToAppData() {
        BlueKit_App_Data += `<AppLabel id="${build_root}" type="BlueKit::Android_Application.Line">${line}</AppLabel>`;
        // console.log(this.AppData)
      },
      
      RemoveChildren(){
        document.getElementById(build_root).innerHTML = '';
      },
      
      Render(id){
        document.getElementById(id).innerHTML += `<AppLabel id="${build_root}" type="BlueKit::Android_Application.Line">${line}</AppLabel>`;
      },
      
      GetRoot(){
        return build_root;
      },
      
      AddChildren(data){
        document.getElementById(build_root).innerHTML += data;
      }
    }
  }
  // AddContent will add content to app
  AddContent(content){
    // this.AppJs.innerHTML+=content;
    // this.AppCache+=content;
    var build_root = crypto.randomUUID();
    document.getElementById(this.AppRoot).innerHTML += content;
    BlueKit_AppCache+=content;
    return {
      LoadToAppData() {
        BlueKit_App_Data += `<AppLabel id="${build_root}" type="BlueKit::Android_Application.Content">${content}</AppLabel>`;
        // console.log(this.AppData)
      },
    
      RemoveChildren() {
        document.getElementById(build_root).innerHTML = '';
      },
    
      Render(id) {
        document.getElementById(id).innerHTML += `<AppLabel id="${build_root}" type="BlueKit::Android_Application.Content">${content}</AppLabel>`;
      },
    
      GetRoot() {
        return build_root;
      },
    
      AddChildren(data) {
        document.getElementById(build_root).innerHTML += data;
      }
    }
  }
  // Reload will reload all the app without requesting from browser and server to serve the page again and again
  ReloadApp(data=0){
    if (data===0){
      document.getElementById(this.AppRoot).innerHTML = BlueKit_App_Data;
      // this.AppJs.innerHTML=AppCache;
    }
    else if (data===1290932810089173){
      document.getElementById(this.AppRoot).innerHTML = BlueKit_AppCache;
    }
    else if (data===2877836827364912){
      document.getElementById(this.AppRoot).innerHTML = this.AppData;
    }
    else{
      thisAppJs.innerHTML=data;
    }
  }
  // Render will Render everything even custom html directly to the app
  Render(data='BlutKit.AndroidApp.Render - Render data was not given', flag='No'){
    if (flag === 'No'){
      document.getElementById(this.AppRoot).innerHTML += data;
    }
    else if (flag==='Re'){
      document.getElementById(this.AppRoot).innerHTML = data;
    }
    else {
      console.error('Error : BlueKit.AndroidApp.Render can not render the data with invalid flag');
    }
  }
  
  // Widgets methods for creating custom widgets
  Widgets(){
    return{
      Button(label, ripple_Color = '0,0,0,0.3', onclick = null) {
        // Generate unique ID for the button
        const uniqueId = `button_${Math.random().toString(36).substr(2, 9)}`;
      
        // Inject CSS styles
        document.head.innerHTML += `
          <style>
            .GButtonAndroid {
              background: #1A73E9;
              height: 40px;
              width: 100px;
              color: white;
              border-radius: 5px;
              display: flex;
              align-items: center;
              justify-content: center;
              position: relative;
              user-select: none;
              overflow: hidden;
              cursor: pointer;
            }
        
            .GButtonAndroid-Ripple {
              width: 20px;
              height: 20px;
              background: rgba(${ripple_Color});
              border-radius: 50%;
              position: absolute;
              transform: scale(0);
              opacity: 1;
              animation: ripple 0.6s linear;
              pointer-events: none;
            }
        
            @keyframes ripple {
              to {
                transform: scale(10);
                opacity: 0;
              }
            }
          </style>
          `;
      
        // Create button element
        const button = document.createElement('div');
        button.className = 'GButtonAndroid';
        button.id = uniqueId;
        button.innerHTML = label;
      
        // Add click event listener
        button.addEventListener('click', function(event) {
          const { x, y } = Mouse.getPos(event);
          const rect = this.getBoundingClientRect();
          const ripple = document.createElement('span');
      
          ripple.className = 'GButtonAndroid-Ripple';
          ripple.style.left = `${x - rect.left - 10}px`; // Center the ripple
          ripple.style.top = `${y - rect.top - 10}px`; // Center the ripple
      
          this.appendChild(ripple);
      
          ripple.addEventListener('animationend', () => {
            ripple.remove();
          });
      
          // Execute custom onclick handler if provided
          if (onclick && typeof onclick === 'function') {
            onclick(event);
          }
        });
      
        // Append button to the body or any desired container
        // document.body.appendChild(button);
      
        // Methods to return
        return {
          LoadToAppData(content) {
            console.log('A Widget cannot be an ApplicationData because they are virtual and only builded until the app closes after closing the widgets doesnot exists');
          },
      
          RemoveChildren() {
            document.getElementById(uniqueId).innerHTML = '';
          },
      
          Render(id) {
            document.getElementById(id).appendChild(button);
            // document.getElementById(id).innerHTML += butto;
          },
      
          GetRoot() {
            return uniqueId;
          },
      
          AddChildren(data) {
            document.getElementById(uniqueId).innerHTML += data;
          },
          
          SetBackground(rgba){
            button.style.background = rgba;
          },
          
          SetFont(font){
            button.style.fontFamily = font;
          },
          
          SetFontSize(size){
            button.style.fontSize = (size+'px');
          },
          SetPadding(l, r, t, b, unit = "px") {
            button.style.paddingLeft = (l + unit);
            button.style.paddingRight = (r + unit);
            button.style.paddingTop = (t + unit);
            button.style.paddingBottom = (b + unit);
          },
          
          SetMargin(l, r, t, b, unit = "px") {
            button.style.marginLeft = (l + unit);
            button.style.marginRight = (r + unit);
            button.style.marginTop = (t + unit);
            button.style.marginBottom = (b + unit);
          },
          SetWidth(int, unit = "px") {
            button.style.width = (int + unit);
          },
          SetHeight(int, unit = "px") {
            button.style.height = (int + unit);
          },
          SetTextColor(rgba){
            button.style.color = rgba;
          }
        };
      },// button
      
      // input
      Input(placeholder, styleS=""){
        const styles = `
          .GInput-Android{
            background: white;
            color: black;
            font-size: 14px;
            padding: 15px;
            border: 1px solid #DBDCDE;
            border-radius: 5px;
            transition: 0.5s;
            outline: none;
          }
          .GInput-Android:focus{
            border-color: #2172DE;
          }
        `;
        document.head.innerHTML += '<style>'+styles+'</style>';
        var root = crypto.randomUUID();
        const input = `<input id="${root}" placeholder="${placeholder}" style="${styleS}" class="GInput-Android">`;
        var Input = document.getElementById(root)
        return {
          LoadToAppData(content) {
            console.log('A Widget cannot be an ApplicationData because they are virtual and only builded until the app closes after closing the widgets doesnot exists');
          },
        
          RemoveChildren() {
            document.getElementById(uniqueId).innerHTML = '';
          },
        
          Render(id) {
            // document.getElementById(id).appendChild(input);
            document.getElementById(id).innerHTML += input;
          },
        
          GetRoot() {
            return root;
          },
        
          AddChildren(data) {
            document.getElementById(root).innerHTML += data;
          },
        
          SetBackground(rgba) {
            Input.style.background = rgba;
          },
        
          SetFont(font) {
            Input.style.fontFamily = font;
          },
        
          SetFontSize(size) {
            Input.style.fontSize = (size + 'px');
          },
        
          SetTextColor(rgba) {
            Input.style.color = rgba;
          },
          
          
          GetValue(){
            return Input.value;
          },
          SetPadding(l, r, t, b, unit = "px") {
              Input.style.paddingLeft = (l + unit);
              Input.style.paddingRight = (r + unit);
              Input.style.paddingTop = (t + unit);
              Input.style.paddingBottom = (b + unit);
            },
          
            SetMargin(l, r, t, b, unit = "px") {
              Input.style.marginLeft = (l + unit);
              Input.style.marginRight = (r + unit);
              Input.style.marginTop = (t + unit);
              Input.style.marginBottom = (b + unit);
            },
            SetWidth(int, unit = "px") {
              Input.style.width = (int + unit);
            },
            SetHeight(int, unit = "px") {
              Input.style.height = (int + unit);
            },
          
          SetValue(text){
            Input.value = text;
          }
        };
      },// input
      
      // largeinput
      LargeInput(placeholder, styleS = "") {
        const styles = `
                .GInput-Android{
                  background: white;
                  color: black;
                  font-size: 14px;
                  padding: 15px;
                  border: 1px solid #DBDCDE;
                  border-radius: 5px;
                  transition: 0.5s;
                  outline: none;
                }
                .GInput-Android:focus{
                  border-color: #2172DE;
                }
              `;
        document.head.innerHTML += '<style>' + styles + '</style>';
        var root = crypto.randomUUID();
        const input = `<textarea id="${root}" placeholder="${placeholder}" style="${styleS}" class="GInput-Android"></textarea>`;
        var Input = document.getElementById(root)
        return {
          LoadToAppData(content) {
            console.log('A Widget cannot be an ApplicationData because they are virtual and only builded until the app closes after closing the widgets doesnot exists');
          },
      
          RemoveChildren() {
            document.getElementById(uniqueId).innerHTML = '';
          },
      
          Render(id) {
            // document.getElementById(id).appendChild(input);
            document.getElementById(id).innerHTML += input;
          },
      
          GetRoot() {
            return root;
          },
      
          AddChildren(data) {
            document.getElementById(root).innerHTML += data;
          },
      
          SetBackground(rgba) {
            Input.style.background = rgba;
          },
      
          SetFont(font) {
            Input.style.fontFamily = font;
          },
      
          SetFontSize(size) {
            Input.style.fontSize = (size + 'px');
          },
      
          SetTextColor(rgba) {
            Input.style.color = rgba;
          },
      
      
          GetValue() {
            return Input.value;
          },
      
          SetValue(text) {
            Input.value = text;
          },
          
          SetPadding(l, r, t, b, unit = "px") {
              Input.style.paddingLeft = (l + unit);
              Input.style.paddingRight = (r + unit);
              Input.style.paddingTop = (t + unit);
              Input.style.paddingBottom = (b + unit);
            },
          
            SetMargin(l, r, t, b, unit = "px") {
              Input.style.marginLeft = (l + unit);
              Input.style.marginRight = (r + unit);
              Input.style.marginTop = (t + unit);
              Input.style.marginBottom = (b + unit);
            },
            SetWidth(int, unit = "px") {
              Input.style.width = (int + unit);
            },
            SetHeight(int, unit = "px") {
              Input.style.height = (int + unit);
            }
        };
      }, // largeinput
      
      // PanelWidget
      Panel(styleS = "") {
        const styles = `
                .GPanel-Android{
                  background: white;
                  color: black;
                  border: 1px solid #DBDBDB;
                  border-radius: 5px;
                  padding: 15PX;
                  width: 80%;
                }
              `;
        document.head.innerHTML += '<style>' + styles + '</style>';
        var root = crypto.randomUUID();
        const panel = `<div id="${root}" style="${styleS}" class="GPanel-Android"></div>`;
        var Input = document.getElementById(root)
        return {
          LoadToAppData(content) {
            console.log('A Widget cannot be an ApplicationData because they are virtual and only builded until the app closes after closing the widgets doesnot exists');
          },
      
          RemoveChildren() {
            document.getElementById(root).innerHTML = '';
          },
      
          Render(id) {
            // document.getElementById(id).appendChild(input);
            document.getElementById(id).innerHTML += panel;
          },
      
          GetRoot() {
            return root;
          },
      
          AddChildren(data) {
            document.getElementById(root).innerHTML += data;
          },
      
          SetBackground(rgba) {
            Input.style.background = rgba;
          },
      
          SetFont(font) {
            Input.style.fontFamily = font;
          },
      
          SetFontSize(size) {
            Input.style.fontSize = (size + 'px');
          },
      
          SetTextColor(rgba) {
            Input.style.color = rgba;
          },
          
          SetPadding(l, r, t, b, unit = "px") {
              Input.style.paddingLeft = (l + unit);
              Input.style.paddingRight = (r + unit);
              Input.style.paddingTop = (t + unit);
              Input.style.paddingBottom = (b + unit);
            },
          
            SetMargin(l, r, t, b, unit = "px") {
              Input.style.marginLeft = (l + unit);
              Input.style.marginRight = (r + unit);
              Input.style.marginTop = (t + unit);
              Input.style.marginBottom = (b + unit);
            },
            SetWidth(int, unit = "px") {
              Input.style.width = (int + unit);
            },
            SetHeight(int, unit = "px") {
              Input.style.height = (int + unit);
            }
        };
      } // panel
    }
  }
  
  // Position
  Position(){
    return{
      Center(id){
        document.getElementById(id).innerHTML += '<center>';
      },
      ECenter(id){
        document.getElementById(id).innerHTML += '</center>';
      }
    }
  }
};